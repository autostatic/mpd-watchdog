#!/bin/sh
#
# mpd-watchdog - monitor mpd while playing internet streams
#
# Copyright (C) 2013 Thomas Kemmer <tkemmer@computer.org>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Based on http://mpd.wikia.com/wiki/Hack:stream-monitor

# uncomment to trace commands
#set -x

# program name
PROGRAM="$(basename "$0")"
# monitoring interval in seconds
INTERVAL=10
# default log level
LOGLEVEL=1
# default LOGGER
LOGGER="log_stderr"
# mpd host
MPDHOST=localhost
# mpd port
MPDPORT=6600

# usage information
USAGE=$(cat <<EOF
Usage: $PROGRAM [OPTION]...
Monitor mpd while playing internet streams.

  -h HOST       MPD server host [$MPDHOST]
  -i INTERVAL   monitoring interval in seconds [$INTERVAL]
  -p PORT       MPD server port [$MPDPORT]
  -s            write log output to syslog
  -v            produce more verbose output
EOF
)

log_stderr() {
    shift
    echo "$0:" "$@" >&2
}

log_syslog() {
    loglevel="$1"
    shift
    logger -t "$PROGRAM" -p "user.$loglevel" "$@"
}

log() {
    case $1 in
        alert|crit|emerg|err|error|warn|warning)
            $LOGGER "$@"
            ;;
        notice)
            [ $LOGLEVEL -gt 0 ] && $LOGGER "$@"
            ;;
        info)
            [ $LOGLEVEL -gt 1 ] && $LOGGER "$@"
            ;;
        debug)
            [ $LOGLEVEL -gt 2 ] && $LOGGER "$@"
            ;;
        *)
            echo "$0: invalid log level: $1"
            ;;
    esac
}

mpc_status() {
    $MPC status 2>/dev/null | grep -B1 '^\[playing\]' | tr '\n' ' '
}

# parse command line options
while getopts "h::i:p:sv" opt; do
    case $opt in
        h)
            MPDHOST=$OPTARG
            ;;
        i)
            INTERVAL=$OPTARG
            ;;
        p)
            MPDPORT=$OPTARG
            ;;
        s)
            LOGGER="log_syslog"
            ;;
        v)
            LOGLEVEL=$(($LOGLEVEL + 1))
            ;;
        *)
            echo "$USAGE" >&2
            exit 2
            ;;
    esac
done

shift $(($OPTIND - 1))

# mpc command
MPC="mpc -h $MPDHOST -p $MPDPORT"

# setup signal handler
trap 'log notice "terminating..." ; exit' INT QUIT KILL TERM

log notice "starting..."

prev_status=$(mpc_status)

while sleep $INTERVAL; do
    status=$(mpc_status)

    if [ -n "$status" ]; then
        log info "$status"
        if [ "$prev_status" = "$status" ]; then
            log warning "restarting mpd"
            $MPC stop && $MPC play || log err "error restarting mpd"
        fi
    else
        log debug "mpd not running/playing"
    fi

    prev_status="$status"
done
